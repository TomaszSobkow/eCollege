package topic10.quiz8;import java.nio.file.FileSystems;import java.nio.file.Path;import java.nio.file.PathMatcher;import java.time.LocalTime;import java.time.temporal.ChronoUnit;import java.util.ArrayList;import java.util.Arrays;import java.util.List;public class LambdaPathMatcher {    public static void main(String[] args) {        PathMatcher matcher1 = (Path p)->{ return (p.toString().contains("DNA")); };        PathMatcher matcher2 = p -> { return (p.toString()).equals("DNA"); };        PathMatcher matcher3 = (Path p) ->  p.toString().startsWith("DNA");        PathMatcher matcher4 = p -> p.toString().endsWith("DNA");        Path path = FileSystems.getDefault().getPath("\\dna_dna\\DNA_results.txt");        LocalTime startTimeArray = LocalTime.now();        PathMatcher[] pathArrays = new PathMatcher[4];            pathArrays[0] = matcher1;            pathArrays[1] = matcher2;            pathArrays[2] = matcher3;            pathArrays[3] = matcher4;        for(PathMatcher p: pathArrays){ System.out.println(p.matches(path)); }        LocalTime endTimeArray = LocalTime.now();        System.out.println(ChronoUnit.MILLIS.between(endTimeArray,startTimeArray) * 0.001);        LocalTime startTimeArrayList = LocalTime.now();        List<PathMatcher> listOfPaths = new ArrayList<PathMatcher>();            listOfPaths.add(matcher2);            listOfPaths.add(matcher3);            listOfPaths.add(matcher4);            listOfPaths.add(0,matcher1);        listOfPaths.forEach( m -> System.out.println(m.matches(path)) );        LocalTime endTimeArrayList = LocalTime.now();        System.out.println(ChronoUnit.MILLIS.between(endTimeArrayList, startTimeArrayList) * 0.001);            List<Object> pathMatcherObjects = new ArrayList<Object>();            PathMatcher matcher5 = p -> p.toString().equals("dlna");            pathMatcherObjects.add(matcher1);            pathMatcherObjects.add(matcher2);            pathMatcherObjects.add(matcher5);    }}